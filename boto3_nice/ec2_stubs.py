
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class ec2_client_type(BaseClient):
    def accept_reserved_instances_exchange_quote(self, ReservedInstanceIds: list, DryRun: bool = None, TargetConfigurations: list = None): ...
    def accept_transit_gateway_vpc_attachment(self, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def accept_vpc_endpoint_connections(self, ServiceId: str, VpcEndpointIds: list, DryRun: bool = None): ...
    def accept_vpc_peering_connection(self, DryRun: bool = None, VpcPeeringConnectionId: str = None): ...
    def advertise_byoip_cidr(self, Cidr: str, DryRun: bool = None): ...
    def allocate_address(self, Domain: str = None, Address: str = None, PublicIpv4Pool: str = None, DryRun: bool = None): ...
    def allocate_hosts(self, AvailabilityZone: str, InstanceType: str, Quantity: int, AutoPlacement: str = None, ClientToken: str = None, TagSpecifications: list = None, HostRecovery: str = None): ...
    def apply_security_groups_to_client_vpn_target_network(self, ClientVpnEndpointId: str, VpcId: str, SecurityGroupIds: list, DryRun: bool = None): ...
    def assign_ipv6_addresses(self, NetworkInterfaceId: str, Ipv6AddressCount: int = None, Ipv6Addresses: list = None): ...
    def assign_private_ip_addresses(self, NetworkInterfaceId: str, AllowReassignment: bool = None, PrivateIpAddresses: list = None, SecondaryPrivateIpAddressCount: int = None): ...
    def associate_address(self, AllocationId: str = None, InstanceId: str = None, PublicIp: str = None, AllowReassociation: bool = None, DryRun: bool = None, NetworkInterfaceId: str = None, PrivateIpAddress: str = None): ...
    def associate_client_vpn_target_network(self, ClientVpnEndpointId: str, SubnetId: str, ClientToken: str = None, DryRun: bool = None): ...
    def associate_dhcp_options(self, DhcpOptionsId: str, VpcId: str, DryRun: bool = None): ...
    def associate_iam_instance_profile(self, IamInstanceProfile: dict, InstanceId: str): ...
    def associate_route_table(self, RouteTableId: str, SubnetId: str, DryRun: bool = None): ...
    def associate_subnet_cidr_block(self, Ipv6CidrBlock: str, SubnetId: str): ...
    def associate_transit_gateway_route_table(self, TransitGatewayRouteTableId: str, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def associate_vpc_cidr_block(self, VpcId: str, AmazonProvidedIpv6CidrBlock: bool = None, CidrBlock: str = None): ...
    def attach_classic_link_vpc(self, Groups: list, InstanceId: str, VpcId: str, DryRun: bool = None): ...
    def attach_internet_gateway(self, InternetGatewayId: str, VpcId: str, DryRun: bool = None): ...
    def attach_network_interface(self, DeviceIndex: int, InstanceId: str, NetworkInterfaceId: str, DryRun: bool = None): ...
    def attach_volume(self, Device: str, InstanceId: str, VolumeId: str, DryRun: bool = None): ...
    def attach_vpn_gateway(self, VpcId: str, VpnGatewayId: str, DryRun: bool = None): ...
    def authorize_client_vpn_ingress(self, ClientVpnEndpointId: str, TargetNetworkCidr: str, AccessGroupId: str = None, AuthorizeAllGroups: bool = None, Description: str = None, ClientToken: str = None, DryRun: bool = None): ...
    def authorize_security_group_egress(self, GroupId: str, DryRun: bool = None, IpPermissions: list = None, CidrIp: str = None, FromPort: int = None, IpProtocol: str = None, ToPort: int = None, SourceSecurityGroupName: str = None, SourceSecurityGroupOwnerId: str = None): ...
    def authorize_security_group_ingress(self, CidrIp: str = None, FromPort: int = None, GroupId: str = None, GroupName: str = None, IpPermissions: list = None, IpProtocol: str = None, SourceSecurityGroupName: str = None, SourceSecurityGroupOwnerId: str = None, ToPort: int = None, DryRun: bool = None): ...
    def bundle_instance(self, InstanceId: str, Storage: dict, DryRun: bool = None): ...
    def cancel_bundle_task(self, BundleId: str, DryRun: bool = None): ...
    def cancel_capacity_reservation(self, CapacityReservationId: str, DryRun: bool = None): ...
    def cancel_conversion_task(self, ConversionTaskId: str, DryRun: bool = None, ReasonMessage: str = None): ...
    def cancel_export_task(self, ExportTaskId: str): ...
    def cancel_import_task(self, CancelReason: str = None, DryRun: bool = None, ImportTaskId: str = None): ...
    def cancel_reserved_instances_listing(self, ReservedInstancesListingId: str): ...
    def cancel_spot_fleet_requests(self, SpotFleetRequestIds: list, TerminateInstances: bool, DryRun: bool = None): ...
    def cancel_spot_instance_requests(self, SpotInstanceRequestIds: list, DryRun: bool = None): ...
    def confirm_product_instance(self, InstanceId: str, ProductCode: str, DryRun: bool = None): ...
    def copy_fpga_image(self, SourceFpgaImageId: str, SourceRegion: str, DryRun: bool = None, Description: str = None, Name: str = None, ClientToken: str = None): ...
    def copy_image(self, Name: str, SourceImageId: str, SourceRegion: str, ClientToken: str = None, Description: str = None, Encrypted: bool = None, KmsKeyId: str = None, DryRun: bool = None): ...
    def copy_snapshot(self, SourceRegion: str, SourceSnapshotId: str, Description: str = None, DestinationRegion: str = None, Encrypted: bool = None, KmsKeyId: str = None, PresignedUrl: str = None, DryRun: bool = None): ...
    def create_capacity_reservation(self, InstanceType: str, InstancePlatform: str, AvailabilityZone: str, InstanceCount: int, ClientToken: str = None, Tenancy: str = None, EbsOptimized: bool = None, EphemeralStorage: bool = None, EndDate: datetime = None, EndDateType: str = None, InstanceMatchCriteria: str = None, TagSpecifications: list = None, DryRun: bool = None): ...
    def create_client_vpn_endpoint(self, ClientCidrBlock: str, ServerCertificateArn: str, AuthenticationOptions: list, ConnectionLogOptions: dict, DnsServers: list = None, TransportProtocol: str = None, Description: str = None, DryRun: bool = None, ClientToken: str = None, TagSpecifications: list = None): ...
    def create_client_vpn_route(self, ClientVpnEndpointId: str, DestinationCidrBlock: str, TargetVpcSubnetId: str, Description: str = None, ClientToken: str = None, DryRun: bool = None): ...
    def create_customer_gateway(self, BgpAsn: int, PublicIp: str, Type: str, DryRun: bool = None): ...
    def create_default_subnet(self, AvailabilityZone: str, DryRun: bool = None): ...
    def create_default_vpc(self, DryRun: bool = None): ...
    def create_dhcp_options(self, DhcpConfigurations: list, DryRun: bool = None): ...
    def create_egress_only_internet_gateway(self, VpcId: str, ClientToken: str = None, DryRun: bool = None): ...
    def create_fleet(self, LaunchTemplateConfigs: list, TargetCapacitySpecification: dict, DryRun: bool = None, ClientToken: str = None, SpotOptions: dict = None, OnDemandOptions: dict = None, ExcessCapacityTerminationPolicy: str = None, TerminateInstancesWithExpiration: bool = None, Type: str = None, ValidFrom: datetime = None, ValidUntil: datetime = None, ReplaceUnhealthyInstances: bool = None, TagSpecifications: list = None): ...
    def create_flow_logs(self, ResourceIds: list, ResourceType: str, TrafficType: str, DryRun: bool = None, ClientToken: str = None, DeliverLogsPermissionArn: str = None, LogGroupName: str = None, LogDestinationType: str = None, LogDestination: str = None): ...
    def create_fpga_image(self, InputStorageLocation: dict, DryRun: bool = None, LogsStorageLocation: dict = None, Description: str = None, Name: str = None, ClientToken: str = None): ...
    def create_image(self, InstanceId: str, Name: str, BlockDeviceMappings: list = None, Description: str = None, DryRun: bool = None, NoReboot: bool = None): ...
    def create_instance_export_task(self, InstanceId: str, Description: str = None, ExportToS3Task: dict = None, TargetEnvironment: str = None): ...
    def create_internet_gateway(self, DryRun: bool = None): ...
    def create_key_pair(self, KeyName: str, DryRun: bool = None): ...
    def create_launch_template(self, LaunchTemplateName: str, LaunchTemplateData: dict, DryRun: bool = None, ClientToken: str = None, VersionDescription: str = None): ...
    def create_launch_template_version(self, LaunchTemplateData: dict, DryRun: bool = None, ClientToken: str = None, LaunchTemplateId: str = None, LaunchTemplateName: str = None, SourceVersion: str = None, VersionDescription: str = None): ...
    def create_nat_gateway(self, AllocationId: str, SubnetId: str, ClientToken: str = None): ...
    def create_network_acl(self, VpcId: str, DryRun: bool = None): ...
    def create_network_acl_entry(self, Egress: bool, NetworkAclId: str, Protocol: str, RuleAction: str, RuleNumber: int, CidrBlock: str = None, DryRun: bool = None, IcmpTypeCode: dict = None, Ipv6CidrBlock: str = None, PortRange: dict = None): ...
    def create_network_interface(self, SubnetId: str, Description: str = None, DryRun: bool = None, Groups: list = None, Ipv6AddressCount: int = None, Ipv6Addresses: list = None, PrivateIpAddress: str = None, PrivateIpAddresses: list = None, SecondaryPrivateIpAddressCount: int = None, InterfaceType: str = None): ...
    def create_network_interface_permission(self, NetworkInterfaceId: str, Permission: str, AwsAccountId: str = None, AwsService: str = None, DryRun: bool = None): ...
    def create_placement_group(self, DryRun: bool = None, GroupName: str = None, Strategy: str = None, PartitionCount: int = None): ...
    def create_reserved_instances_listing(self, ClientToken: str, InstanceCount: int, PriceSchedules: list, ReservedInstancesId: str): ...
    def create_route(self, RouteTableId: str, DestinationCidrBlock: str = None, DestinationIpv6CidrBlock: str = None, DryRun: bool = None, EgressOnlyInternetGatewayId: str = None, GatewayId: str = None, InstanceId: str = None, NatGatewayId: str = None, TransitGatewayId: str = None, NetworkInterfaceId: str = None, VpcPeeringConnectionId: str = None): ...
    def create_route_table(self, VpcId: str, DryRun: bool = None): ...
    def create_security_group(self, Description: str, GroupName: str, VpcId: str = None, DryRun: bool = None): ...
    def create_snapshot(self, VolumeId: str, Description: str = None, TagSpecifications: list = None, DryRun: bool = None): ...
    def create_snapshots(self, InstanceSpecification: dict, Description: str = None, TagSpecifications: list = None, DryRun: bool = None, CopyTagsFromSource: str = None): ...
    def create_spot_datafeed_subscription(self, Bucket: str, DryRun: bool = None, Prefix: str = None): ...
    def create_subnet(self, CidrBlock: str, VpcId: str, AvailabilityZone: str = None, AvailabilityZoneId: str = None, Ipv6CidrBlock: str = None, DryRun: bool = None): ...
    def create_tags(self, Resources: list, Tags: list, DryRun: bool = None): ...
    def create_transit_gateway(self, Description: str = None, Options: dict = None, TagSpecifications: list = None, DryRun: bool = None): ...
    def create_transit_gateway_route(self, DestinationCidrBlock: str, TransitGatewayRouteTableId: str, TransitGatewayAttachmentId: str = None, Blackhole: bool = None, DryRun: bool = None): ...
    def create_transit_gateway_route_table(self, TransitGatewayId: str, TagSpecifications: list = None, DryRun: bool = None): ...
    def create_transit_gateway_vpc_attachment(self, TransitGatewayId: str, VpcId: str, SubnetIds: list, Options: dict = None, TagSpecifications: list = None, DryRun: bool = None): ...
    def create_volume(self, AvailabilityZone: str, Encrypted: bool = None, Iops: int = None, KmsKeyId: str = None, Size: int = None, SnapshotId: str = None, VolumeType: str = None, DryRun: bool = None, TagSpecifications: list = None): ...
    def create_vpc(self, CidrBlock: str, AmazonProvidedIpv6CidrBlock: bool = None, DryRun: bool = None, InstanceTenancy: str = None): ...
    def create_vpc_endpoint(self, VpcId: str, ServiceName: str, DryRun: bool = None, VpcEndpointType: str = None, PolicyDocument: str = None, RouteTableIds: list = None, SubnetIds: list = None, SecurityGroupIds: list = None, ClientToken: str = None, PrivateDnsEnabled: bool = None): ...
    def create_vpc_endpoint_connection_notification(self, ConnectionNotificationArn: str, ConnectionEvents: list, DryRun: bool = None, ServiceId: str = None, VpcEndpointId: str = None, ClientToken: str = None): ...
    def create_vpc_endpoint_service_configuration(self, NetworkLoadBalancerArns: list, DryRun: bool = None, AcceptanceRequired: bool = None, ClientToken: str = None): ...
    def create_vpc_peering_connection(self, DryRun: bool = None, PeerOwnerId: str = None, PeerVpcId: str = None, VpcId: str = None, PeerRegion: str = None): ...
    def create_vpn_connection(self, CustomerGatewayId: str, Type: str, VpnGatewayId: str = None, TransitGatewayId: str = None, DryRun: bool = None, Options: dict = None): ...
    def create_vpn_connection_route(self, DestinationCidrBlock: str, VpnConnectionId: str): ...
    def create_vpn_gateway(self, Type: str, AvailabilityZone: str = None, AmazonSideAsn: int = None, DryRun: bool = None): ...
    def delete_client_vpn_endpoint(self, ClientVpnEndpointId: str, DryRun: bool = None): ...
    def delete_client_vpn_route(self, ClientVpnEndpointId: str, DestinationCidrBlock: str, TargetVpcSubnetId: str = None, DryRun: bool = None): ...
    def delete_customer_gateway(self, CustomerGatewayId: str, DryRun: bool = None): ...
    def delete_dhcp_options(self, DhcpOptionsId: str, DryRun: bool = None): ...
    def delete_egress_only_internet_gateway(self, EgressOnlyInternetGatewayId: str, DryRun: bool = None): ...
    def delete_fleets(self, FleetIds: list, TerminateInstances: bool, DryRun: bool = None): ...
    def delete_flow_logs(self, FlowLogIds: list, DryRun: bool = None): ...
    def delete_fpga_image(self, FpgaImageId: str, DryRun: bool = None): ...
    def delete_internet_gateway(self, InternetGatewayId: str, DryRun: bool = None): ...
    def delete_key_pair(self, KeyName: str, DryRun: bool = None): ...
    def delete_launch_template(self, DryRun: bool = None, LaunchTemplateId: str = None, LaunchTemplateName: str = None): ...
    def delete_launch_template_versions(self, Versions: list, DryRun: bool = None, LaunchTemplateId: str = None, LaunchTemplateName: str = None): ...
    def delete_nat_gateway(self, NatGatewayId: str): ...
    def delete_network_acl(self, NetworkAclId: str, DryRun: bool = None): ...
    def delete_network_acl_entry(self, Egress: bool, NetworkAclId: str, RuleNumber: int, DryRun: bool = None): ...
    def delete_network_interface(self, NetworkInterfaceId: str, DryRun: bool = None): ...
    def delete_network_interface_permission(self, NetworkInterfacePermissionId: str, Force: bool = None, DryRun: bool = None): ...
    def delete_placement_group(self, GroupName: str, DryRun: bool = None): ...
    def delete_route(self, RouteTableId: str, DestinationCidrBlock: str = None, DestinationIpv6CidrBlock: str = None, DryRun: bool = None): ...
    def delete_route_table(self, RouteTableId: str, DryRun: bool = None): ...
    def delete_security_group(self, GroupId: str = None, GroupName: str = None, DryRun: bool = None): ...
    def delete_snapshot(self, SnapshotId: str, DryRun: bool = None): ...
    def delete_spot_datafeed_subscription(self, DryRun: bool = None): ...
    def delete_subnet(self, SubnetId: str, DryRun: bool = None): ...
    def delete_tags(self, Resources: list, DryRun: bool = None, Tags: list = None): ...
    def delete_transit_gateway(self, TransitGatewayId: str, DryRun: bool = None): ...
    def delete_transit_gateway_route(self, TransitGatewayRouteTableId: str, DestinationCidrBlock: str, DryRun: bool = None): ...
    def delete_transit_gateway_route_table(self, TransitGatewayRouteTableId: str, DryRun: bool = None): ...
    def delete_transit_gateway_vpc_attachment(self, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def delete_volume(self, VolumeId: str, DryRun: bool = None): ...
    def delete_vpc(self, VpcId: str, DryRun: bool = None): ...
    def delete_vpc_endpoint_connection_notifications(self, ConnectionNotificationIds: list, DryRun: bool = None): ...
    def delete_vpc_endpoint_service_configurations(self, ServiceIds: list, DryRun: bool = None): ...
    def delete_vpc_endpoints(self, VpcEndpointIds: list, DryRun: bool = None): ...
    def delete_vpc_peering_connection(self, VpcPeeringConnectionId: str, DryRun: bool = None): ...
    def delete_vpn_connection(self, VpnConnectionId: str, DryRun: bool = None): ...
    def delete_vpn_connection_route(self, DestinationCidrBlock: str, VpnConnectionId: str): ...
    def delete_vpn_gateway(self, VpnGatewayId: str, DryRun: bool = None): ...
    def deprovision_byoip_cidr(self, Cidr: str, DryRun: bool = None): ...
    def deregister_image(self, ImageId: str, DryRun: bool = None): ...
    def describe_account_attributes(self, AttributeNames: list = None, DryRun: bool = None): ...
    def describe_addresses(self, Filters: list = None, PublicIps: list = None, AllocationIds: list = None, DryRun: bool = None): ...
    def describe_aggregate_id_format(self, DryRun: bool = None): ...
    def describe_availability_zones(self, Filters: list = None, ZoneNames: list = None, ZoneIds: list = None, DryRun: bool = None): ...
    def describe_bundle_tasks(self, BundleIds: list = None, Filters: list = None, DryRun: bool = None): ...
    def describe_byoip_cidrs(self, MaxResults: int, DryRun: bool = None, NextToken: str = None): ...
    def describe_capacity_reservations(self, CapacityReservationIds: list = None, NextToken: str = None, MaxResults: int = None, Filters: list = None, DryRun: bool = None): ...
    def describe_classic_link_instances(self, Filters: list = None, DryRun: bool = None, InstanceIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_client_vpn_authorization_rules(self, ClientVpnEndpointId: str, DryRun: bool = None, NextToken: str = None, Filters: list = None, MaxResults: int = None): ...
    def describe_client_vpn_connections(self, ClientVpnEndpointId: str, Filters: list = None, NextToken: str = None, MaxResults: int = None, DryRun: bool = None): ...
    def describe_client_vpn_endpoints(self, ClientVpnEndpointIds: list = None, MaxResults: int = None, NextToken: str = None, Filters: list = None, DryRun: bool = None): ...
    def describe_client_vpn_routes(self, ClientVpnEndpointId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def describe_client_vpn_target_networks(self, ClientVpnEndpointId: str, AssociationIds: list = None, MaxResults: int = None, NextToken: str = None, Filters: list = None, DryRun: bool = None): ...
    def describe_conversion_tasks(self, ConversionTaskIds: list = None, DryRun: bool = None): ...
    def describe_customer_gateways(self, CustomerGatewayIds: list = None, Filters: list = None, DryRun: bool = None): ...
    def describe_dhcp_options(self, DhcpOptionsIds: list = None, Filters: list = None, DryRun: bool = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_egress_only_internet_gateways(self, DryRun: bool = None, EgressOnlyInternetGatewayIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_elastic_gpus(self, ElasticGpuIds: list = None, DryRun: bool = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_export_tasks(self, ExportTaskIds: list = None): ...
    def describe_fleet_history(self, FleetId: str, StartTime: datetime, DryRun: bool = None, EventType: str = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_fleet_instances(self, FleetId: str, DryRun: bool = None, MaxResults: int = None, NextToken: str = None, Filters: list = None): ...
    def describe_fleets(self, DryRun: bool = None, MaxResults: int = None, NextToken: str = None, FleetIds: list = None, Filters: list = None): ...
    def describe_flow_logs(self, DryRun: bool = None, Filter: list = None, FlowLogIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_fpga_image_attribute(self, FpgaImageId: str, Attribute: str, DryRun: bool = None): ...
    def describe_fpga_images(self, DryRun: bool = None, FpgaImageIds: list = None, Owners: list = None, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_host_reservation_offerings(self, Filter: list = None, MaxDuration: int = None, MaxResults: int = None, MinDuration: int = None, NextToken: str = None, OfferingId: str = None): ...
    def describe_host_reservations(self, Filter: list = None, HostReservationIdSet: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_hosts(self, Filter: list = None, HostIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_iam_instance_profile_associations(self, AssociationIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_id_format(self, Resource: str = None): ...
    def describe_identity_id_format(self, PrincipalArn: str, Resource: str = None): ...
    def describe_image_attribute(self, Attribute: str, ImageId: str, DryRun: bool = None): ...
    def describe_images(self, ExecutableUsers: list = None, Filters: list = None, ImageIds: list = None, Owners: list = None, DryRun: bool = None): ...
    def describe_import_image_tasks(self, DryRun: bool = None, Filters: list = None, ImportTaskIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_import_snapshot_tasks(self, DryRun: bool = None, Filters: list = None, ImportTaskIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_instance_attribute(self, Attribute: str, InstanceId: str, DryRun: bool = None): ...
    def describe_instance_credit_specifications(self, DryRun: bool = None, Filters: list = None, InstanceIds: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_instance_status(self, Filters: list = None, InstanceIds: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None, IncludeAllInstances: bool = None): ...
    def describe_instances(self, Filters: list = None, InstanceIds: list = None, DryRun: bool = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_internet_gateways(self, Filters: list = None, DryRun: bool = None, InternetGatewayIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_key_pairs(self, Filters: list = None, KeyNames: list = None, DryRun: bool = None): ...
    def describe_launch_template_versions(self, DryRun: bool = None, LaunchTemplateId: str = None, LaunchTemplateName: str = None, Versions: list = None, MinVersion: str = None, MaxVersion: str = None, NextToken: str = None, MaxResults: int = None, Filters: list = None): ...
    def describe_launch_templates(self, DryRun: bool = None, LaunchTemplateIds: list = None, LaunchTemplateNames: list = None, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_moving_addresses(self, Filters: list = None, DryRun: bool = None, MaxResults: int = None, NextToken: str = None, PublicIps: list = None): ...
    def describe_nat_gateways(self, Filter: list = None, MaxResults: int = None, NatGatewayIds: list = None, NextToken: str = None): ...
    def describe_network_acls(self, Filters: list = None, DryRun: bool = None, NetworkAclIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_network_interface_attribute(self, NetworkInterfaceId: str, Attribute: str = None, DryRun: bool = None): ...
    def describe_network_interface_permissions(self, NetworkInterfacePermissionIds: list = None, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_network_interfaces(self, Filters: list = None, DryRun: bool = None, NetworkInterfaceIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_placement_groups(self, Filters: list = None, DryRun: bool = None, GroupNames: list = None): ...
    def describe_prefix_lists(self, DryRun: bool = None, Filters: list = None, MaxResults: int = None, NextToken: str = None, PrefixListIds: list = None): ...
    def describe_principal_id_format(self, DryRun: bool = None, Resources: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_public_ipv4_pools(self, PoolIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_regions(self, Filters: list = None, RegionNames: list = None, DryRun: bool = None): ...
    def describe_reserved_instances(self, Filters: list = None, OfferingClass: str = None, ReservedInstancesIds: list = None, DryRun: bool = None, OfferingType: str = None): ...
    def describe_reserved_instances_listings(self, Filters: list = None, ReservedInstancesId: str = None, ReservedInstancesListingId: str = None): ...
    def describe_reserved_instances_modifications(self, Filters: list = None, ReservedInstancesModificationIds: list = None, NextToken: str = None): ...
    def describe_reserved_instances_offerings(self, AvailabilityZone: str = None, Filters: list = None, IncludeMarketplace: bool = None, InstanceType: str = None, MaxDuration: int = None, MaxInstanceCount: int = None, MinDuration: int = None, OfferingClass: str = None, ProductDescription: str = None, ReservedInstancesOfferingIds: list = None, DryRun: bool = None, InstanceTenancy: str = None, MaxResults: int = None, NextToken: str = None, OfferingType: str = None): ...
    def describe_route_tables(self, Filters: list = None, DryRun: bool = None, RouteTableIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_scheduled_instance_availability(self, FirstSlotStartTimeRange: dict, Recurrence: dict, DryRun: bool = None, Filters: list = None, MaxResults: int = None, MaxSlotDurationInHours: int = None, MinSlotDurationInHours: int = None, NextToken: str = None): ...
    def describe_scheduled_instances(self, DryRun: bool = None, Filters: list = None, MaxResults: int = None, NextToken: str = None, ScheduledInstanceIds: list = None, SlotStartTimeRange: dict = None): ...
    def describe_security_group_references(self, GroupId: list, DryRun: bool = None): ...
    def describe_security_groups(self, Filters: list = None, GroupIds: list = None, GroupNames: list = None, DryRun: bool = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_snapshot_attribute(self, Attribute: str, SnapshotId: str, DryRun: bool = None): ...
    def describe_snapshots(self, Filters: list = None, MaxResults: int = None, NextToken: str = None, OwnerIds: list = None, RestorableByUserIds: list = None, SnapshotIds: list = None, DryRun: bool = None): ...
    def describe_spot_datafeed_subscription(self, DryRun: bool = None): ...
    def describe_spot_fleet_instances(self, SpotFleetRequestId: str, DryRun: bool = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_spot_fleet_request_history(self, SpotFleetRequestId: str, StartTime: datetime, DryRun: bool = None, EventType: str = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_spot_fleet_requests(self, DryRun: bool = None, MaxResults: int = None, NextToken: str = None, SpotFleetRequestIds: list = None): ...
    def describe_spot_instance_requests(self, Filters: list = None, DryRun: bool = None, SpotInstanceRequestIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_spot_price_history(self, Filters: list = None, AvailabilityZone: str = None, DryRun: bool = None, EndTime: datetime = None, InstanceTypes: list = None, MaxResults: int = None, NextToken: str = None, ProductDescriptions: list = None, StartTime: datetime = None): ...
    def describe_stale_security_groups(self, VpcId: str, DryRun: bool = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_subnets(self, Filters: list = None, SubnetIds: list = None, DryRun: bool = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_tags(self, DryRun: bool = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_transit_gateway_attachments(self, TransitGatewayAttachmentIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def describe_transit_gateway_route_tables(self, TransitGatewayRouteTableIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def describe_transit_gateway_vpc_attachments(self, TransitGatewayAttachmentIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def describe_transit_gateways(self, TransitGatewayIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def describe_volume_attribute(self, Attribute: str, VolumeId: str, DryRun: bool = None): ...
    def describe_volume_status(self, Filters: list = None, MaxResults: int = None, NextToken: str = None, VolumeIds: list = None, DryRun: bool = None): ...
    def describe_volumes(self, Filters: list = None, VolumeIds: list = None, DryRun: bool = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_volumes_modifications(self, DryRun: bool = None, VolumeIds: list = None, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_vpc_attribute(self, Attribute: str, VpcId: str, DryRun: bool = None): ...
    def describe_vpc_classic_link(self, Filters: list = None, DryRun: bool = None, VpcIds: list = None): ...
    def describe_vpc_classic_link_dns_support(self, MaxResults: int = None, NextToken: str = None, VpcIds: list = None): ...
    def describe_vpc_endpoint_connection_notifications(self, DryRun: bool = None, ConnectionNotificationId: str = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_vpc_endpoint_connections(self, DryRun: bool = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_vpc_endpoint_service_configurations(self, DryRun: bool = None, ServiceIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_vpc_endpoint_service_permissions(self, ServiceId: str, DryRun: bool = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_vpc_endpoint_services(self, DryRun: bool = None, ServiceNames: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_vpc_endpoints(self, DryRun: bool = None, VpcEndpointIds: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_vpc_peering_connections(self, Filters: list = None, DryRun: bool = None, VpcPeeringConnectionIds: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_vpcs(self, Filters: list = None, VpcIds: list = None, DryRun: bool = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_vpn_connections(self, Filters: list = None, VpnConnectionIds: list = None, DryRun: bool = None): ...
    def describe_vpn_gateways(self, Filters: list = None, VpnGatewayIds: list = None, DryRun: bool = None): ...
    def detach_classic_link_vpc(self, InstanceId: str, VpcId: str, DryRun: bool = None): ...
    def detach_internet_gateway(self, InternetGatewayId: str, VpcId: str, DryRun: bool = None): ...
    def detach_network_interface(self, AttachmentId: str, DryRun: bool = None, Force: bool = None): ...
    def detach_volume(self, VolumeId: str, Device: str = None, Force: bool = None, InstanceId: str = None, DryRun: bool = None): ...
    def detach_vpn_gateway(self, VpcId: str, VpnGatewayId: str, DryRun: bool = None): ...
    def disable_ebs_encryption_by_default(self, DryRun: bool = None): ...
    def disable_transit_gateway_route_table_propagation(self, TransitGatewayRouteTableId: str, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def disable_vgw_route_propagation(self, GatewayId: str, RouteTableId: str): ...
    def disable_vpc_classic_link(self, VpcId: str, DryRun: bool = None): ...
    def disable_vpc_classic_link_dns_support(self, VpcId: str = None): ...
    def disassociate_address(self, AssociationId: str = None, PublicIp: str = None, DryRun: bool = None): ...
    def disassociate_client_vpn_target_network(self, ClientVpnEndpointId: str, AssociationId: str, DryRun: bool = None): ...
    def disassociate_iam_instance_profile(self, AssociationId: str): ...
    def disassociate_route_table(self, AssociationId: str, DryRun: bool = None): ...
    def disassociate_subnet_cidr_block(self, AssociationId: str): ...
    def disassociate_transit_gateway_route_table(self, TransitGatewayRouteTableId: str, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def disassociate_vpc_cidr_block(self, AssociationId: str): ...
    def enable_ebs_encryption_by_default(self, DryRun: bool = None): ...
    def enable_transit_gateway_route_table_propagation(self, TransitGatewayRouteTableId: str, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def enable_vgw_route_propagation(self, GatewayId: str, RouteTableId: str): ...
    def enable_volume_io(self, VolumeId: str, DryRun: bool = None): ...
    def enable_vpc_classic_link(self, VpcId: str, DryRun: bool = None): ...
    def enable_vpc_classic_link_dns_support(self, VpcId: str = None): ...
    def export_client_vpn_client_certificate_revocation_list(self, ClientVpnEndpointId: str, DryRun: bool = None): ...
    def export_client_vpn_client_configuration(self, ClientVpnEndpointId: str, DryRun: bool = None): ...
    def export_transit_gateway_routes(self, TransitGatewayRouteTableId: str, S3Bucket: str, Filters: list = None, DryRun: bool = None): ...
    def get_console_output(self, InstanceId: str, DryRun: bool = None, Latest: bool = None): ...
    def get_console_screenshot(self, InstanceId: str, DryRun: bool = None, WakeUp: bool = None): ...
    def get_ebs_default_kms_key_id(self, DryRun: bool = None): ...
    def get_ebs_encryption_by_default(self, DryRun: bool = None): ...
    def get_host_reservation_purchase_preview(self, HostIdSet: list, OfferingId: str): ...
    def get_launch_template_data(self, InstanceId: str, DryRun: bool = None): ...
    def get_password_data(self, InstanceId: str, DryRun: bool = None): ...
    def get_reserved_instances_exchange_quote(self, ReservedInstanceIds: list, DryRun: bool = None, TargetConfigurations: list = None): ...
    def get_transit_gateway_attachment_propagations(self, TransitGatewayAttachmentId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def get_transit_gateway_route_table_associations(self, TransitGatewayRouteTableId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def get_transit_gateway_route_table_propagations(self, TransitGatewayRouteTableId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None, DryRun: bool = None): ...
    def import_client_vpn_client_certificate_revocation_list(self, ClientVpnEndpointId: str, CertificateRevocationList: str, DryRun: bool = None): ...
    def import_image(self, Architecture: str = None, ClientData: dict = None, ClientToken: str = None, Description: str = None, DiskContainers: list = None, DryRun: bool = None, Encrypted: bool = None, Hypervisor: str = None, KmsKeyId: str = None, LicenseType: str = None, Platform: str = None, RoleName: str = None): ...
    def import_instance(self, Platform: str, Description: str = None, DiskImages: list = None, DryRun: bool = None, LaunchSpecification: dict = None): ...
    def import_key_pair(self, KeyName: str, PublicKeyMaterial: bytes, DryRun: bool = None): ...
    def import_snapshot(self, ClientData: dict = None, ClientToken: str = None, Description: str = None, DiskContainer: dict = None, DryRun: bool = None, Encrypted: bool = None, KmsKeyId: str = None, RoleName: str = None): ...
    def import_volume(self, AvailabilityZone: str, Image: dict, Volume: dict, Description: str = None, DryRun: bool = None): ...
    def modify_capacity_reservation(self, CapacityReservationId: str, InstanceCount: int = None, EndDate: datetime = None, EndDateType: str = None, DryRun: bool = None): ...
    def modify_client_vpn_endpoint(self, ClientVpnEndpointId: str, ServerCertificateArn: str = None, ConnectionLogOptions: dict = None, DnsServers: dict = None, Description: str = None, DryRun: bool = None): ...
    def modify_ebs_default_kms_key_id(self, KmsKeyId: str, DryRun: bool = None): ...
    def modify_fleet(self, FleetId: str, TargetCapacitySpecification: dict, DryRun: bool = None, ExcessCapacityTerminationPolicy: str = None): ...
    def modify_fpga_image_attribute(self, FpgaImageId: str, DryRun: bool = None, Attribute: str = None, OperationType: str = None, UserIds: list = None, UserGroups: list = None, ProductCodes: list = None, LoadPermission: dict = None, Description: str = None, Name: str = None): ...
    def modify_hosts(self, HostIds: list, AutoPlacement: str = None, HostRecovery: str = None): ...
    def modify_id_format(self, Resource: str, UseLongIds: bool): ...
    def modify_identity_id_format(self, PrincipalArn: str, Resource: str, UseLongIds: bool): ...
    def modify_image_attribute(self, ImageId: str, Attribute: str = None, Description: dict = None, LaunchPermission: dict = None, OperationType: str = None, ProductCodes: list = None, UserGroups: list = None, UserIds: list = None, Value: str = None, DryRun: bool = None): ...
    def modify_instance_attribute(self, InstanceId: str, SourceDestCheck: dict = None, Attribute: str = None, BlockDeviceMappings: list = None, DisableApiTermination: dict = None, DryRun: bool = None, EbsOptimized: dict = None, EnaSupport: dict = None, Groups: list = None, InstanceInitiatedShutdownBehavior: dict = None, InstanceType: dict = None, Kernel: dict = None, Ramdisk: dict = None, SriovNetSupport: dict = None, UserData: dict = None, Value: str = None): ...
    def modify_instance_capacity_reservation_attributes(self, InstanceId: str, CapacityReservationSpecification: dict, DryRun: bool = None): ...
    def modify_instance_credit_specification(self, InstanceCreditSpecifications: list, DryRun: bool = None, ClientToken: str = None): ...
    def modify_instance_event_start_time(self, InstanceId: str, InstanceEventId: str, NotBefore: datetime, DryRun: bool = None): ...
    def modify_instance_placement(self, InstanceId: str, Affinity: str = None, GroupName: str = None, HostId: str = None, Tenancy: str = None, PartitionNumber: int = None): ...
    def modify_launch_template(self, DryRun: bool = None, ClientToken: str = None, LaunchTemplateId: str = None, LaunchTemplateName: str = None, DefaultVersion: str = None): ...
    def modify_network_interface_attribute(self, NetworkInterfaceId: str, Attachment: dict = None, Description: dict = None, DryRun: bool = None, Groups: list = None, SourceDestCheck: dict = None): ...
    def modify_reserved_instances(self, ReservedInstancesIds: list, TargetConfigurations: list, ClientToken: str = None): ...
    def modify_snapshot_attribute(self, SnapshotId: str, Attribute: str = None, CreateVolumePermission: dict = None, GroupNames: list = None, OperationType: str = None, UserIds: list = None, DryRun: bool = None): ...
    def modify_spot_fleet_request(self, SpotFleetRequestId: str, ExcessCapacityTerminationPolicy: str = None, TargetCapacity: int = None): ...
    def modify_subnet_attribute(self, SubnetId: str, AssignIpv6AddressOnCreation: dict = None, MapPublicIpOnLaunch: dict = None): ...
    def modify_transit_gateway_vpc_attachment(self, TransitGatewayAttachmentId: str, AddSubnetIds: list = None, RemoveSubnetIds: list = None, Options: dict = None, DryRun: bool = None): ...
    def modify_volume(self, VolumeId: str, DryRun: bool = None, Size: int = None, VolumeType: str = None, Iops: int = None): ...
    def modify_volume_attribute(self, VolumeId: str, AutoEnableIO: dict = None, DryRun: bool = None): ...
    def modify_vpc_attribute(self, VpcId: str, EnableDnsHostnames: dict = None, EnableDnsSupport: dict = None): ...
    def modify_vpc_endpoint(self, VpcEndpointId: str, DryRun: bool = None, ResetPolicy: bool = None, PolicyDocument: str = None, AddRouteTableIds: list = None, RemoveRouteTableIds: list = None, AddSubnetIds: list = None, RemoveSubnetIds: list = None, AddSecurityGroupIds: list = None, RemoveSecurityGroupIds: list = None, PrivateDnsEnabled: bool = None): ...
    def modify_vpc_endpoint_connection_notification(self, ConnectionNotificationId: str, DryRun: bool = None, ConnectionNotificationArn: str = None, ConnectionEvents: list = None): ...
    def modify_vpc_endpoint_service_configuration(self, ServiceId: str, DryRun: bool = None, AcceptanceRequired: bool = None, AddNetworkLoadBalancerArns: list = None, RemoveNetworkLoadBalancerArns: list = None): ...
    def modify_vpc_endpoint_service_permissions(self, ServiceId: str, DryRun: bool = None, AddAllowedPrincipals: list = None, RemoveAllowedPrincipals: list = None): ...
    def modify_vpc_peering_connection_options(self, VpcPeeringConnectionId: str, AccepterPeeringConnectionOptions: dict = None, DryRun: bool = None, RequesterPeeringConnectionOptions: dict = None): ...
    def modify_vpc_tenancy(self, VpcId: str, InstanceTenancy: str, DryRun: bool = None): ...
    def modify_vpn_connection(self, VpnConnectionId: str, TransitGatewayId: str = None, VpnGatewayId: str = None, DryRun: bool = None): ...
    def monitor_instances(self, InstanceIds: list, DryRun: bool = None): ...
    def move_address_to_vpc(self, PublicIp: str, DryRun: bool = None): ...
    def provision_byoip_cidr(self, Cidr: str, CidrAuthorizationContext: dict = None, Description: str = None, DryRun: bool = None): ...
    def purchase_host_reservation(self, HostIdSet: list, OfferingId: str, ClientToken: str = None, CurrencyCode: str = None, LimitPrice: str = None): ...
    def purchase_reserved_instances_offering(self, InstanceCount: int, ReservedInstancesOfferingId: str, DryRun: bool = None, LimitPrice: dict = None): ...
    def purchase_scheduled_instances(self, PurchaseRequests: list, ClientToken: str = None, DryRun: bool = None): ...
    def reboot_instances(self, InstanceIds: list, DryRun: bool = None): ...
    def register_image(self, Name: str, ImageLocation: str = None, Architecture: str = None, BlockDeviceMappings: list = None, Description: str = None, DryRun: bool = None, EnaSupport: bool = None, KernelId: str = None, BillingProducts: list = None, RamdiskId: str = None, RootDeviceName: str = None, SriovNetSupport: str = None, VirtualizationType: str = None): ...
    def reject_transit_gateway_vpc_attachment(self, TransitGatewayAttachmentId: str, DryRun: bool = None): ...
    def reject_vpc_endpoint_connections(self, ServiceId: str, VpcEndpointIds: list, DryRun: bool = None): ...
    def reject_vpc_peering_connection(self, VpcPeeringConnectionId: str, DryRun: bool = None): ...
    def release_address(self, AllocationId: str = None, PublicIp: str = None, DryRun: bool = None): ...
    def release_hosts(self, HostIds: list): ...
    def replace_iam_instance_profile_association(self, IamInstanceProfile: dict, AssociationId: str): ...
    def replace_network_acl_association(self, AssociationId: str, NetworkAclId: str, DryRun: bool = None): ...
    def replace_network_acl_entry(self, Egress: bool, NetworkAclId: str, Protocol: str, RuleAction: str, RuleNumber: int, CidrBlock: str = None, DryRun: bool = None, IcmpTypeCode: dict = None, Ipv6CidrBlock: str = None, PortRange: dict = None): ...
    def replace_route(self, RouteTableId: str, DestinationCidrBlock: str = None, DestinationIpv6CidrBlock: str = None, DryRun: bool = None, EgressOnlyInternetGatewayId: str = None, GatewayId: str = None, InstanceId: str = None, NatGatewayId: str = None, TransitGatewayId: str = None, NetworkInterfaceId: str = None, VpcPeeringConnectionId: str = None): ...
    def replace_route_table_association(self, AssociationId: str, RouteTableId: str, DryRun: bool = None): ...
    def replace_transit_gateway_route(self, DestinationCidrBlock: str, TransitGatewayRouteTableId: str, TransitGatewayAttachmentId: str = None, Blackhole: bool = None, DryRun: bool = None): ...
    def report_instance_status(self, Instances: list, ReasonCodes: list, Status: str, Description: str = None, DryRun: bool = None, EndTime: datetime = None, StartTime: datetime = None): ...
    def request_spot_fleet(self, SpotFleetRequestConfig: dict, DryRun: bool = None): ...
    def request_spot_instances(self, AvailabilityZoneGroup: str = None, BlockDurationMinutes: int = None, ClientToken: str = None, DryRun: bool = None, InstanceCount: int = None, LaunchGroup: str = None, LaunchSpecification: dict = None, SpotPrice: str = None, Type: str = None, ValidFrom: datetime = None, ValidUntil: datetime = None, InstanceInterruptionBehavior: str = None): ...
    def reset_ebs_default_kms_key_id(self, DryRun: bool = None): ...
    def reset_fpga_image_attribute(self, FpgaImageId: str, DryRun: bool = None, Attribute: str = None): ...
    def reset_image_attribute(self, Attribute: str, ImageId: str, DryRun: bool = None): ...
    def reset_instance_attribute(self, Attribute: str, InstanceId: str, DryRun: bool = None): ...
    def reset_network_interface_attribute(self, NetworkInterfaceId: str, DryRun: bool = None, SourceDestCheck: str = None): ...
    def reset_snapshot_attribute(self, Attribute: str, SnapshotId: str, DryRun: bool = None): ...
    def restore_address_to_classic(self, PublicIp: str, DryRun: bool = None): ...
    def revoke_client_vpn_ingress(self, ClientVpnEndpointId: str, TargetNetworkCidr: str, AccessGroupId: str = None, RevokeAllGroups: bool = None, DryRun: bool = None): ...
    def revoke_security_group_egress(self, GroupId: str, DryRun: bool = None, IpPermissions: list = None, CidrIp: str = None, FromPort: int = None, IpProtocol: str = None, ToPort: int = None, SourceSecurityGroupName: str = None, SourceSecurityGroupOwnerId: str = None): ...
    def revoke_security_group_ingress(self, CidrIp: str = None, FromPort: int = None, GroupId: str = None, GroupName: str = None, IpPermissions: list = None, IpProtocol: str = None, SourceSecurityGroupName: str = None, SourceSecurityGroupOwnerId: str = None, ToPort: int = None, DryRun: bool = None): ...
    def run_instances(self, MaxCount: int, MinCount: int, BlockDeviceMappings: list = None, ImageId: str = None, InstanceType: str = None, Ipv6AddressCount: int = None, Ipv6Addresses: list = None, KernelId: str = None, KeyName: str = None, Monitoring: dict = None, Placement: dict = None, RamdiskId: str = None, SecurityGroupIds: list = None, SecurityGroups: list = None, SubnetId: str = None, UserData: str = None, AdditionalInfo: str = None, ClientToken: str = None, DisableApiTermination: bool = None, DryRun: bool = None, EbsOptimized: bool = None, IamInstanceProfile: dict = None, InstanceInitiatedShutdownBehavior: str = None, NetworkInterfaces: list = None, PrivateIpAddress: str = None, ElasticGpuSpecification: list = None, ElasticInferenceAccelerators: list = None, TagSpecifications: list = None, LaunchTemplate: dict = None, InstanceMarketOptions: dict = None, CreditSpecification: dict = None, CpuOptions: dict = None, CapacityReservationSpecification: dict = None, HibernationOptions: dict = None, LicenseSpecifications: list = None): ...
    def run_scheduled_instances(self, LaunchSpecification: dict, ScheduledInstanceId: str, ClientToken: str = None, DryRun: bool = None, InstanceCount: int = None): ...
    def search_transit_gateway_routes(self, TransitGatewayRouteTableId: str, Filters: list, MaxResults: int = None, DryRun: bool = None): ...
    def start_instances(self, InstanceIds: list, AdditionalInfo: str = None, DryRun: bool = None): ...
    def stop_instances(self, InstanceIds: list, Hibernate: bool = None, DryRun: bool = None, Force: bool = None): ...
    def terminate_client_vpn_connections(self, ClientVpnEndpointId: str, ConnectionId: str = None, Username: str = None, DryRun: bool = None): ...
    def terminate_instances(self, InstanceIds: list, DryRun: bool = None): ...
    def unassign_ipv6_addresses(self, Ipv6Addresses: list, NetworkInterfaceId: str): ...
    def unassign_private_ip_addresses(self, NetworkInterfaceId: str, PrivateIpAddresses: list): ...
    def unmonitor_instances(self, InstanceIds: list, DryRun: bool = None): ...
    def update_security_group_rule_descriptions_egress(self, IpPermissions: list, DryRun: bool = None, GroupId: str = None, GroupName: str = None): ...
    def update_security_group_rule_descriptions_ingress(self, IpPermissions: list, DryRun: bool = None, GroupId: str = None, GroupName: str = None): ...
    def withdraw_byoip_cidr(self, Cidr: str, DryRun: bool = None): ...
    pass

