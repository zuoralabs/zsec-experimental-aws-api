
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class sqs_client_type(BaseClient):
    def add_permission(self, QueueUrl: str, Label: str, AWSAccountIds: list, Actions: list): ...
    def change_message_visibility(self, QueueUrl: str, ReceiptHandle: str, VisibilityTimeout: int): ...
    def change_message_visibility_batch(self, QueueUrl: str, Entries: list): ...
    def create_queue(self, QueueName: str, Attributes: Map = None): ...
    def delete_message(self, QueueUrl: str, ReceiptHandle: str): ...
    def delete_message_batch(self, QueueUrl: str, Entries: list): ...
    def delete_queue(self, QueueUrl: str): ...
    def get_queue_attributes(self, QueueUrl: str, AttributeNames: list = None): ...
    def get_queue_url(self, QueueName: str, QueueOwnerAWSAccountId: str = None): ...
    def list_dead_letter_source_queues(self, QueueUrl: str): ...
    def list_queue_tags(self, QueueUrl: str): ...
    def list_queues(self, QueueNamePrefix: str = None): ...
    def purge_queue(self, QueueUrl: str): ...
    def receive_message(self, QueueUrl: str, AttributeNames: list = None, MessageAttributeNames: list = None, MaxNumberOfMessages: int = None, VisibilityTimeout: int = None, WaitTimeSeconds: int = None, ReceiveRequestAttemptId: str = None): ...
    def remove_permission(self, QueueUrl: str, Label: str): ...
    def send_message(self, QueueUrl: str, MessageBody: str, DelaySeconds: int = None, MessageAttributes: Map = None, MessageDeduplicationId: str = None, MessageGroupId: str = None): ...
    def send_message_batch(self, QueueUrl: str, Entries: list): ...
    def set_queue_attributes(self, QueueUrl: str, Attributes: Map): ...
    def tag_queue(self, QueueUrl: str, Tags: Map): ...
    def untag_queue(self, QueueUrl: str, TagKeys: list): ...
    pass

