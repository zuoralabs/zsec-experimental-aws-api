
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class kinesis_client_type(BaseClient):
    def add_tags_to_stream(self, StreamName: str, Tags: Map): ...
    def create_stream(self, StreamName: str, ShardCount: int): ...
    def decrease_stream_retention_period(self, StreamName: str, RetentionPeriodHours: int): ...
    def delete_stream(self, StreamName: str, EnforceConsumerDeletion: bool = None): ...
    def deregister_stream_consumer(self, StreamARN: str = None, ConsumerName: str = None, ConsumerARN: str = None): ...
    def describe_limits(self): ...
    def describe_stream(self, StreamName: str, Limit: int = None, ExclusiveStartShardId: str = None): ...
    def describe_stream_consumer(self, StreamARN: str = None, ConsumerName: str = None, ConsumerARN: str = None): ...
    def describe_stream_summary(self, StreamName: str): ...
    def disable_enhanced_monitoring(self, StreamName: str, ShardLevelMetrics: list): ...
    def enable_enhanced_monitoring(self, StreamName: str, ShardLevelMetrics: list): ...
    def get_records(self, ShardIterator: str, Limit: int = None): ...
    def get_shard_iterator(self, StreamName: str, ShardId: str, ShardIteratorType: str, StartingSequenceNumber: str = None, Timestamp: datetime = None): ...
    def increase_stream_retention_period(self, StreamName: str, RetentionPeriodHours: int): ...
    def list_shards(self, StreamName: str = None, NextToken: str = None, ExclusiveStartShardId: str = None, MaxResults: int = None, StreamCreationTimestamp: datetime = None): ...
    def list_stream_consumers(self, StreamARN: str, NextToken: str = None, MaxResults: int = None, StreamCreationTimestamp: datetime = None): ...
    def list_streams(self, Limit: int = None, ExclusiveStartStreamName: str = None): ...
    def list_tags_for_stream(self, StreamName: str, ExclusiveStartTagKey: str = None, Limit: int = None): ...
    def merge_shards(self, StreamName: str, ShardToMerge: str, AdjacentShardToMerge: str): ...
    def put_record(self, StreamName: str, Data: bytes, PartitionKey: str, ExplicitHashKey: str = None, SequenceNumberForOrdering: str = None): ...
    def put_records(self, Records: list, StreamName: str): ...
    def register_stream_consumer(self, StreamARN: str, ConsumerName: str): ...
    def remove_tags_from_stream(self, StreamName: str, TagKeys: list): ...
    def split_shard(self, StreamName: str, ShardToSplit: str, NewStartingHashKey: str): ...
    def start_stream_encryption(self, StreamName: str, EncryptionType: str, KeyId: str): ...
    def stop_stream_encryption(self, StreamName: str, EncryptionType: str, KeyId: str): ...
    def subscribe_to_shard(self, ConsumerARN: str, ShardId: str, StartingPosition: dict): ...
    def update_shard_count(self, StreamName: str, TargetShardCount: int, ScalingType: str): ...
    pass

