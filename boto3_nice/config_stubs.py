
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class config_client_type(BaseClient):
    def batch_get_aggregate_resource_config(self, ConfigurationAggregatorName: str, ResourceIdentifiers: list): ...
    def batch_get_resource_config(self, resourceKeys: list): ...
    def delete_aggregation_authorization(self, AuthorizedAccountId: str, AuthorizedAwsRegion: str): ...
    def delete_config_rule(self, ConfigRuleName: str): ...
    def delete_configuration_aggregator(self, ConfigurationAggregatorName: str): ...
    def delete_configuration_recorder(self, ConfigurationRecorderName: str): ...
    def delete_delivery_channel(self, DeliveryChannelName: str): ...
    def delete_evaluation_results(self, ConfigRuleName: str): ...
    def delete_pending_aggregation_request(self, RequesterAccountId: str, RequesterAwsRegion: str): ...
    def delete_remediation_configuration(self, ConfigRuleName: str, ResourceType: str = None): ...
    def delete_retention_configuration(self, RetentionConfigurationName: str): ...
    def deliver_config_snapshot(self, deliveryChannelName: str): ...
    def describe_aggregate_compliance_by_config_rules(self, ConfigurationAggregatorName: str, Filters: dict = None, Limit: int = None, NextToken: str = None): ...
    def describe_aggregation_authorizations(self, Limit: int = None, NextToken: str = None): ...
    def describe_compliance_by_config_rule(self, ConfigRuleNames: list = None, ComplianceTypes: list = None, NextToken: str = None): ...
    def describe_compliance_by_resource(self, ResourceType: str = None, ResourceId: str = None, ComplianceTypes: list = None, Limit: int = None, NextToken: str = None): ...
    def describe_config_rule_evaluation_status(self, ConfigRuleNames: list = None, NextToken: str = None, Limit: int = None): ...
    def describe_config_rules(self, ConfigRuleNames: list = None, NextToken: str = None): ...
    def describe_configuration_aggregator_sources_status(self, ConfigurationAggregatorName: str, UpdateStatus: list = None, NextToken: str = None, Limit: int = None): ...
    def describe_configuration_aggregators(self, ConfigurationAggregatorNames: list = None, NextToken: str = None, Limit: int = None): ...
    def describe_configuration_recorder_status(self, ConfigurationRecorderNames: list = None): ...
    def describe_configuration_recorders(self, ConfigurationRecorderNames: list = None): ...
    def describe_delivery_channel_status(self, DeliveryChannelNames: list = None): ...
    def describe_delivery_channels(self, DeliveryChannelNames: list = None): ...
    def describe_pending_aggregation_requests(self, Limit: int = None, NextToken: str = None): ...
    def describe_remediation_configurations(self, ConfigRuleNames: list): ...
    def describe_remediation_execution_status(self, ConfigRuleName: str, ResourceKeys: list = None, Limit: int = None, NextToken: str = None): ...
    def describe_retention_configurations(self, RetentionConfigurationNames: list = None, NextToken: str = None): ...
    def get_aggregate_compliance_details_by_config_rule(self, ConfigurationAggregatorName: str, ConfigRuleName: str, AccountId: str, AwsRegion: str, ComplianceType: str = None, Limit: int = None, NextToken: str = None): ...
    def get_aggregate_config_rule_compliance_summary(self, ConfigurationAggregatorName: str, Filters: dict = None, GroupByKey: str = None, Limit: int = None, NextToken: str = None): ...
    def get_aggregate_discovered_resource_counts(self, ConfigurationAggregatorName: str, Filters: dict = None, GroupByKey: str = None, Limit: int = None, NextToken: str = None): ...
    def get_aggregate_resource_config(self, ConfigurationAggregatorName: str, ResourceIdentifier: dict): ...
    def get_compliance_details_by_config_rule(self, ConfigRuleName: str, ComplianceTypes: list = None, Limit: int = None, NextToken: str = None): ...
    def get_compliance_details_by_resource(self, ResourceType: str, ResourceId: str, ComplianceTypes: list = None, NextToken: str = None): ...
    def get_compliance_summary_by_config_rule(self): ...
    def get_compliance_summary_by_resource_type(self, ResourceTypes: list = None): ...
    def get_discovered_resource_counts(self, resourceTypes: list = None, limit: int = None, nextToken: str = None): ...
    def get_resource_config_history(self, resourceType: str, resourceId: str, laterTime: datetime = None, earlierTime: datetime = None, chronologicalOrder: str = None, limit: int = None, nextToken: str = None): ...
    def list_aggregate_discovered_resources(self, ConfigurationAggregatorName: str, ResourceType: str, Filters: dict = None, Limit: int = None, NextToken: str = None): ...
    def list_discovered_resources(self, resourceType: str, resourceIds: list = None, resourceName: str = None, limit: int = None, includeDeletedResources: bool = None, nextToken: str = None): ...
    def list_tags_for_resource(self, ResourceArn: str, Limit: int = None, NextToken: str = None): ...
    def put_aggregation_authorization(self, AuthorizedAccountId: str, AuthorizedAwsRegion: str, Tags: list = None): ...
    def put_config_rule(self, ConfigRule: dict, Tags: list = None): ...
    def put_configuration_aggregator(self, ConfigurationAggregatorName: str, AccountAggregationSources: list = None, OrganizationAggregationSource: dict = None, Tags: list = None): ...
    def put_configuration_recorder(self, ConfigurationRecorder: dict): ...
    def put_delivery_channel(self, DeliveryChannel: dict): ...
    def put_evaluations(self, ResultToken: str, Evaluations: list = None, TestMode: bool = None): ...
    def put_remediation_configurations(self, RemediationConfigurations: list): ...
    def put_retention_configuration(self, RetentionPeriodInDays: int): ...
    def select_resource_config(self, Expression: str, Limit: int = None, NextToken: str = None): ...
    def start_config_rules_evaluation(self, ConfigRuleNames: list = None): ...
    def start_configuration_recorder(self, ConfigurationRecorderName: str): ...
    def start_remediation_execution(self, ConfigRuleName: str, ResourceKeys: list): ...
    def stop_configuration_recorder(self, ConfigurationRecorderName: str): ...
    def tag_resource(self, ResourceArn: str, Tags: list): ...
    def untag_resource(self, ResourceArn: str, TagKeys: list): ...
    pass

