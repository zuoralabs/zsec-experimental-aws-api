
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class ssm_client_type(BaseClient):
    def add_tags_to_resource(self, ResourceType: str, ResourceId: str, Tags: list): ...
    def cancel_command(self, CommandId: str, InstanceIds: list = None): ...
    def cancel_maintenance_window_execution(self, WindowExecutionId: str): ...
    def create_activation(self, IamRole: str, Description: str = None, DefaultInstanceName: str = None, RegistrationLimit: int = None, ExpirationDate: datetime = None, Tags: list = None): ...
    def create_association(self, Name: str, DocumentVersion: str = None, InstanceId: str = None, Parameters: Map = None, Targets: list = None, ScheduleExpression: str = None, OutputLocation: dict = None, AssociationName: str = None, AutomationTargetParameterName: str = None, MaxErrors: str = None, MaxConcurrency: str = None, ComplianceSeverity: str = None): ...
    def create_association_batch(self, Entries: list): ...
    def create_document(self, Content: str, Name: str, Attachments: list = None, VersionName: str = None, DocumentType: str = None, DocumentFormat: str = None, TargetType: str = None, Tags: list = None): ...
    def create_maintenance_window(self, Name: str, Schedule: str, Duration: int, Cutoff: int, AllowUnassociatedTargets: bool, Description: str = None, StartDate: str = None, EndDate: str = None, ScheduleTimezone: str = None, ClientToken: str = None, Tags: list = None): ...
    def create_ops_item(self, Description: str, Source: str, Title: str, OperationalData: Map = None, Notifications: list = None, Priority: int = None, RelatedOpsItems: list = None, Tags: list = None): ...
    def create_patch_baseline(self, Name: str, OperatingSystem: str = None, GlobalFilters: dict = None, ApprovalRules: dict = None, ApprovedPatches: list = None, ApprovedPatchesComplianceLevel: str = None, ApprovedPatchesEnableNonSecurity: bool = None, RejectedPatches: list = None, RejectedPatchesAction: str = None, Description: str = None, Sources: list = None, ClientToken: str = None, Tags: list = None): ...
    def create_resource_data_sync(self, SyncName: str, S3Destination: dict): ...
    def delete_activation(self, ActivationId: str): ...
    def delete_association(self, Name: str = None, InstanceId: str = None, AssociationId: str = None): ...
    def delete_document(self, Name: str): ...
    def delete_inventory(self, TypeName: str, SchemaDeleteOption: str = None, DryRun: bool = None, ClientToken: str = None): ...
    def delete_maintenance_window(self, WindowId: str): ...
    def delete_parameter(self, Name: str): ...
    def delete_parameters(self, Names: list): ...
    def delete_patch_baseline(self, BaselineId: str): ...
    def delete_resource_data_sync(self, SyncName: str): ...
    def deregister_managed_instance(self, InstanceId: str): ...
    def deregister_patch_baseline_for_patch_group(self, BaselineId: str, PatchGroup: str): ...
    def deregister_target_from_maintenance_window(self, WindowId: str, WindowTargetId: str, Safe: bool = None): ...
    def deregister_task_from_maintenance_window(self, WindowId: str, WindowTaskId: str): ...
    def describe_activations(self, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_association(self, Name: str = None, InstanceId: str = None, AssociationId: str = None, AssociationVersion: str = None): ...
    def describe_association_execution_targets(self, AssociationId: str, ExecutionId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_association_executions(self, AssociationId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_automation_executions(self, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_automation_step_executions(self, AutomationExecutionId: str, Filters: list = None, NextToken: str = None, MaxResults: int = None, ReverseOrder: bool = None): ...
    def describe_available_patches(self, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_document(self, Name: str, DocumentVersion: str = None, VersionName: str = None): ...
    def describe_document_permission(self, Name: str, PermissionType: str): ...
    def describe_effective_instance_associations(self, InstanceId: str, MaxResults: int = None, NextToken: str = None): ...
    def describe_effective_patches_for_patch_baseline(self, BaselineId: str, MaxResults: int = None, NextToken: str = None): ...
    def describe_instance_associations_status(self, InstanceId: str, MaxResults: int = None, NextToken: str = None): ...
    def describe_instance_information(self, InstanceInformationFilterList: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_instance_patch_states(self, InstanceIds: list, NextToken: str = None, MaxResults: int = None): ...
    def describe_instance_patch_states_for_patch_group(self, PatchGroup: str, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_instance_patches(self, InstanceId: str, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_inventory_deletions(self, DeletionId: str = None, NextToken: str = None, MaxResults: int = None): ...
    def describe_maintenance_window_execution_task_invocations(self, WindowExecutionId: str, TaskId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_window_execution_tasks(self, WindowExecutionId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_window_executions(self, WindowId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_window_schedule(self, WindowId: str = None, Targets: list = None, ResourceType: str = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_window_targets(self, WindowId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_window_tasks(self, WindowId: str, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_windows(self, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_maintenance_windows_for_target(self, Targets: list, ResourceType: str, MaxResults: int = None, NextToken: str = None): ...
    def describe_ops_items(self, OpsItemFilters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_parameters(self, Filters: list = None, ParameterFilters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_patch_baselines(self, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_patch_group_state(self, PatchGroup: str): ...
    def describe_patch_groups(self, MaxResults: int = None, Filters: list = None, NextToken: str = None): ...
    def describe_patch_properties(self, OperatingSystem: str, Property: str, PatchSet: str = None, MaxResults: int = None, NextToken: str = None): ...
    def describe_sessions(self, State: str, MaxResults: int = None, NextToken: str = None, Filters: list = None): ...
    def get_automation_execution(self, AutomationExecutionId: str): ...
    def get_command_invocation(self, CommandId: str, InstanceId: str, PluginName: str = None): ...
    def get_connection_status(self, Target: str): ...
    def get_default_patch_baseline(self, OperatingSystem: str = None): ...
    def get_deployable_patch_snapshot_for_instance(self, InstanceId: str, SnapshotId: str): ...
    def get_document(self, Name: str, VersionName: str = None, DocumentVersion: str = None, DocumentFormat: str = None): ...
    def get_inventory(self, Filters: list = None, Aggregators: list = None, ResultAttributes: list = None, NextToken: str = None, MaxResults: int = None): ...
    def get_inventory_schema(self, TypeName: str = None, NextToken: str = None, MaxResults: int = None, Aggregator: bool = None, SubType: bool = None): ...
    def get_maintenance_window(self, WindowId: str): ...
    def get_maintenance_window_execution(self, WindowExecutionId: str): ...
    def get_maintenance_window_execution_task(self, WindowExecutionId: str, TaskId: str): ...
    def get_maintenance_window_execution_task_invocation(self, WindowExecutionId: str, TaskId: str, InvocationId: str): ...
    def get_maintenance_window_task(self, WindowId: str, WindowTaskId: str): ...
    def get_ops_item(self, OpsItemId: str): ...
    def get_ops_summary(self, Aggregators: list, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def get_parameter(self, Name: str, WithDecryption: bool = None): ...
    def get_parameter_history(self, Name: str, WithDecryption: bool = None, MaxResults: int = None, NextToken: str = None): ...
    def get_parameters(self, Names: list, WithDecryption: bool = None): ...
    def get_parameters_by_path(self, Path: str, Recursive: bool = None, ParameterFilters: list = None, WithDecryption: bool = None, MaxResults: int = None, NextToken: str = None): ...
    def get_patch_baseline(self, BaselineId: str): ...
    def get_patch_baseline_for_patch_group(self, PatchGroup: str, OperatingSystem: str = None): ...
    def get_service_setting(self, SettingId: str): ...
    def label_parameter_version(self, Name: str, Labels: list, ParameterVersion: int = None): ...
    def list_association_versions(self, AssociationId: str, MaxResults: int = None, NextToken: str = None): ...
    def list_associations(self, AssociationFilterList: list = None, MaxResults: int = None, NextToken: str = None): ...
    def list_command_invocations(self, CommandId: str = None, InstanceId: str = None, MaxResults: int = None, NextToken: str = None, Filters: list = None, Details: bool = None): ...
    def list_commands(self, CommandId: str = None, InstanceId: str = None, MaxResults: int = None, NextToken: str = None, Filters: list = None): ...
    def list_compliance_items(self, Filters: list = None, ResourceIds: list = None, ResourceTypes: list = None, NextToken: str = None, MaxResults: int = None): ...
    def list_compliance_summaries(self, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def list_document_versions(self, Name: str, MaxResults: int = None, NextToken: str = None): ...
    def list_documents(self, DocumentFilterList: list = None, Filters: list = None, MaxResults: int = None, NextToken: str = None): ...
    def list_inventory_entries(self, InstanceId: str, TypeName: str, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def list_resource_compliance_summaries(self, Filters: list = None, NextToken: str = None, MaxResults: int = None): ...
    def list_resource_data_sync(self, NextToken: str = None, MaxResults: int = None): ...
    def list_tags_for_resource(self, ResourceType: str, ResourceId: str): ...
    def modify_document_permission(self, Name: str, PermissionType: str, AccountIdsToAdd: list = None, AccountIdsToRemove: list = None): ...
    def put_compliance_items(self, ResourceId: str, ResourceType: str, ComplianceType: str, ExecutionSummary: dict, Items: list, ItemContentHash: str = None): ...
    def put_inventory(self, InstanceId: str, Items: list): ...
    def put_parameter(self, Name: str, Value: str, Type: str, Description: str = None, KeyId: str = None, Overwrite: bool = None, AllowedPattern: str = None, Tags: list = None, Tier: str = None, Policies: str = None): ...
    def register_default_patch_baseline(self, BaselineId: str): ...
    def register_patch_baseline_for_patch_group(self, BaselineId: str, PatchGroup: str): ...
    def register_target_with_maintenance_window(self, WindowId: str, ResourceType: str, Targets: list, OwnerInformation: str = None, Name: str = None, Description: str = None, ClientToken: str = None): ...
    def register_task_with_maintenance_window(self, WindowId: str, Targets: list, TaskArn: str, TaskType: str, MaxConcurrency: str, MaxErrors: str, ServiceRoleArn: str = None, TaskParameters: Map = None, TaskInvocationParameters: dict = None, Priority: int = None, LoggingInfo: dict = None, Name: str = None, Description: str = None, ClientToken: str = None): ...
    def remove_tags_from_resource(self, ResourceType: str, ResourceId: str, TagKeys: list): ...
    def reset_service_setting(self, SettingId: str): ...
    def resume_session(self, SessionId: str): ...
    def send_automation_signal(self, AutomationExecutionId: str, SignalType: str, Payload: Map = None): ...
    def send_command(self, DocumentName: str, InstanceIds: list = None, Targets: list = None, DocumentVersion: str = None, DocumentHash: str = None, DocumentHashType: str = None, TimeoutSeconds: int = None, Comment: str = None, Parameters: Map = None, OutputS3Region: str = None, OutputS3BucketName: str = None, OutputS3KeyPrefix: str = None, MaxConcurrency: str = None, MaxErrors: str = None, ServiceRoleArn: str = None, NotificationConfig: dict = None, CloudWatchOutputConfig: dict = None): ...
    def start_associations_once(self, AssociationIds: list): ...
    def start_automation_execution(self, DocumentName: str, DocumentVersion: str = None, Parameters: Map = None, ClientToken: str = None, Mode: str = None, TargetParameterName: str = None, Targets: list = None, TargetMaps: list = None, MaxConcurrency: str = None, MaxErrors: str = None, TargetLocations: list = None): ...
    def start_session(self, Target: str, DocumentName: str = None, Parameters: Map = None): ...
    def stop_automation_execution(self, AutomationExecutionId: str, Type: str = None): ...
    def terminate_session(self, SessionId: str): ...
    def update_association(self, AssociationId: str, Parameters: Map = None, DocumentVersion: str = None, ScheduleExpression: str = None, OutputLocation: dict = None, Name: str = None, Targets: list = None, AssociationName: str = None, AssociationVersion: str = None, AutomationTargetParameterName: str = None, MaxErrors: str = None, MaxConcurrency: str = None, ComplianceSeverity: str = None): ...
    def update_association_status(self, Name: str, InstanceId: str, AssociationStatus: dict): ...
    def update_document(self, Content: str, Name: str, Attachments: list = None, VersionName: str = None, DocumentVersion: str = None, DocumentFormat: str = None, TargetType: str = None): ...
    def update_document_default_version(self, Name: str, DocumentVersion: str): ...
    def update_maintenance_window(self, WindowId: str, Name: str = None, Description: str = None, StartDate: str = None, EndDate: str = None, Schedule: str = None, ScheduleTimezone: str = None, Duration: int = None, Cutoff: int = None, AllowUnassociatedTargets: bool = None, Enabled: bool = None, Replace: bool = None): ...
    def update_maintenance_window_target(self, WindowId: str, WindowTargetId: str, Targets: list = None, OwnerInformation: str = None, Name: str = None, Description: str = None, Replace: bool = None): ...
    def update_maintenance_window_task(self, WindowId: str, WindowTaskId: str, Targets: list = None, TaskArn: str = None, ServiceRoleArn: str = None, TaskParameters: Map = None, TaskInvocationParameters: dict = None, Priority: int = None, MaxConcurrency: str = None, MaxErrors: str = None, LoggingInfo: dict = None, Name: str = None, Description: str = None, Replace: bool = None): ...
    def update_managed_instance_role(self, InstanceId: str, IamRole: str): ...
    def update_ops_item(self, OpsItemId: str, Description: str = None, OperationalData: Map = None, OperationalDataToDelete: list = None, Notifications: list = None, Priority: int = None, RelatedOpsItems: list = None, Status: str = None, Title: str = None): ...
    def update_patch_baseline(self, BaselineId: str, Name: str = None, GlobalFilters: dict = None, ApprovalRules: dict = None, ApprovedPatches: list = None, ApprovedPatchesComplianceLevel: str = None, ApprovedPatchesEnableNonSecurity: bool = None, RejectedPatches: list = None, RejectedPatchesAction: str = None, Description: str = None, Sources: list = None, Replace: bool = None): ...
    def update_service_setting(self, SettingId: str, SettingValue: str): ...
    pass

