
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class s3_client_type(BaseClient):
    def abort_multipart_upload(self, Bucket: str, Key: str, UploadId: str, RequestPayer: str = None): ...
    def complete_multipart_upload(self, Bucket: str, Key: str, UploadId: str, MultipartUpload: dict = None, RequestPayer: str = None): ...
    def copy_object(self, Bucket: str, CopySource: str, Key: str, ACL: str = None, CacheControl: str = None, ContentDisposition: str = None, ContentEncoding: str = None, ContentLanguage: str = None, ContentType: str = None, CopySourceIfMatch: str = None, CopySourceIfModifiedSince: datetime = None, CopySourceIfNoneMatch: str = None, CopySourceIfUnmodifiedSince: datetime = None, Expires: datetime = None, GrantFullControl: str = None, GrantRead: str = None, GrantReadACP: str = None, GrantWriteACP: str = None, Metadata: Map = None, MetadataDirective: str = None, TaggingDirective: str = None, ServerSideEncryption: str = None, StorageClass: str = None, WebsiteRedirectLocation: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, SSEKMSKeyId: str = None, CopySourceSSECustomerAlgorithm: str = None, CopySourceSSECustomerKey: str = None, CopySourceSSECustomerKeyMD5: str = None, RequestPayer: str = None, Tagging: str = None, ObjectLockMode: str = None, ObjectLockRetainUntilDate: datetime = None, ObjectLockLegalHoldStatus: str = None): ...
    def create_bucket(self, Bucket: str, ACL: str = None, CreateBucketConfiguration: dict = None, GrantFullControl: str = None, GrantRead: str = None, GrantReadACP: str = None, GrantWrite: str = None, GrantWriteACP: str = None, ObjectLockEnabledForBucket: bool = None): ...
    def create_multipart_upload(self, Bucket: str, Key: str, ACL: str = None, CacheControl: str = None, ContentDisposition: str = None, ContentEncoding: str = None, ContentLanguage: str = None, ContentType: str = None, Expires: datetime = None, GrantFullControl: str = None, GrantRead: str = None, GrantReadACP: str = None, GrantWriteACP: str = None, Metadata: Map = None, ServerSideEncryption: str = None, StorageClass: str = None, WebsiteRedirectLocation: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, SSEKMSKeyId: str = None, RequestPayer: str = None, Tagging: str = None, ObjectLockMode: str = None, ObjectLockRetainUntilDate: datetime = None, ObjectLockLegalHoldStatus: str = None): ...
    def delete_bucket(self, Bucket: str): ...
    def delete_bucket_analytics_configuration(self, Bucket: str, Id: str): ...
    def delete_bucket_cors(self, Bucket: str): ...
    def delete_bucket_encryption(self, Bucket: str): ...
    def delete_bucket_inventory_configuration(self, Bucket: str, Id: str): ...
    def delete_bucket_lifecycle(self, Bucket: str): ...
    def delete_bucket_metrics_configuration(self, Bucket: str, Id: str): ...
    def delete_bucket_policy(self, Bucket: str): ...
    def delete_bucket_replication(self, Bucket: str): ...
    def delete_bucket_tagging(self, Bucket: str): ...
    def delete_bucket_website(self, Bucket: str): ...
    def delete_object(self, Bucket: str, Key: str, MFA: str = None, VersionId: str = None, RequestPayer: str = None, BypassGovernanceRetention: bool = None): ...
    def delete_object_tagging(self, Bucket: str, Key: str, VersionId: str = None): ...
    def delete_objects(self, Bucket: str, Delete: dict, MFA: str = None, RequestPayer: str = None, BypassGovernanceRetention: bool = None): ...
    def delete_public_access_block(self, Bucket: str): ...
    def get_bucket_accelerate_configuration(self, Bucket: str): ...
    def get_bucket_acl(self, Bucket: str): ...
    def get_bucket_analytics_configuration(self, Bucket: str, Id: str): ...
    def get_bucket_cors(self, Bucket: str): ...
    def get_bucket_encryption(self, Bucket: str): ...
    def get_bucket_inventory_configuration(self, Bucket: str, Id: str): ...
    def get_bucket_lifecycle(self, Bucket: str): ...
    def get_bucket_lifecycle_configuration(self, Bucket: str): ...
    def get_bucket_location(self, Bucket: str): ...
    def get_bucket_logging(self, Bucket: str): ...
    def get_bucket_metrics_configuration(self, Bucket: str, Id: str): ...
    def get_bucket_notification(self, Bucket: str): ...
    def get_bucket_notification_configuration(self, Bucket: str): ...
    def get_bucket_policy(self, Bucket: str): ...
    def get_bucket_policy_status(self, Bucket: str): ...
    def get_bucket_replication(self, Bucket: str): ...
    def get_bucket_request_payment(self, Bucket: str): ...
    def get_bucket_tagging(self, Bucket: str): ...
    def get_bucket_versioning(self, Bucket: str): ...
    def get_bucket_website(self, Bucket: str): ...
    def get_object(self, Bucket: str, Key: str, IfMatch: str = None, IfModifiedSince: datetime = None, IfNoneMatch: str = None, IfUnmodifiedSince: datetime = None, Range: str = None, ResponseCacheControl: str = None, ResponseContentDisposition: str = None, ResponseContentEncoding: str = None, ResponseContentLanguage: str = None, ResponseContentType: str = None, ResponseExpires: datetime = None, VersionId: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, RequestPayer: str = None, PartNumber: int = None): ...
    def get_object_acl(self, Bucket: str, Key: str, VersionId: str = None, RequestPayer: str = None): ...
    def get_object_legal_hold(self, Bucket: str, Key: str, VersionId: str = None, RequestPayer: str = None): ...
    def get_object_lock_configuration(self, Bucket: str): ...
    def get_object_retention(self, Bucket: str, Key: str, VersionId: str = None, RequestPayer: str = None): ...
    def get_object_tagging(self, Bucket: str, Key: str, VersionId: str = None): ...
    def get_object_torrent(self, Bucket: str, Key: str, RequestPayer: str = None): ...
    def get_public_access_block(self, Bucket: str): ...
    def head_bucket(self, Bucket: str): ...
    def head_object(self, Bucket: str, Key: str, IfMatch: str = None, IfModifiedSince: datetime = None, IfNoneMatch: str = None, IfUnmodifiedSince: datetime = None, Range: str = None, VersionId: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, RequestPayer: str = None, PartNumber: int = None): ...
    def list_bucket_analytics_configurations(self, Bucket: str, ContinuationToken: str = None): ...
    def list_bucket_inventory_configurations(self, Bucket: str, ContinuationToken: str = None): ...
    def list_bucket_metrics_configurations(self, Bucket: str, ContinuationToken: str = None): ...
    def list_buckets(self): ...
    def list_multipart_uploads(self, Bucket: str, Delimiter: str = None, EncodingType: str = None, KeyMarker: str = None, MaxUploads: int = None, Prefix: str = None, UploadIdMarker: str = None): ...
    def list_object_versions(self, Bucket: str, Delimiter: str = None, EncodingType: str = None, KeyMarker: str = None, MaxKeys: int = None, Prefix: str = None, VersionIdMarker: str = None): ...
    def list_objects(self, Bucket: str, Delimiter: str = None, EncodingType: str = None, Marker: str = None, MaxKeys: int = None, Prefix: str = None, RequestPayer: str = None): ...
    def list_objects_v2(self, Bucket: str, Delimiter: str = None, EncodingType: str = None, MaxKeys: int = None, Prefix: str = None, ContinuationToken: str = None, FetchOwner: bool = None, StartAfter: str = None, RequestPayer: str = None): ...
    def list_parts(self, Bucket: str, Key: str, UploadId: str, MaxParts: int = None, PartNumberMarker: int = None, RequestPayer: str = None): ...
    def put_bucket_accelerate_configuration(self, Bucket: str, AccelerateConfiguration: dict): ...
    def put_bucket_acl(self, Bucket: str, ACL: str = None, AccessControlPolicy: dict = None, ContentMD5: str = None, GrantFullControl: str = None, GrantRead: str = None, GrantReadACP: str = None, GrantWrite: str = None, GrantWriteACP: str = None): ...
    def put_bucket_analytics_configuration(self, Bucket: str, Id: str, AnalyticsConfiguration: dict): ...
    def put_bucket_cors(self, Bucket: str, CORSConfiguration: dict, ContentMD5: str = None): ...
    def put_bucket_encryption(self, Bucket: str, ServerSideEncryptionConfiguration: dict, ContentMD5: str = None): ...
    def put_bucket_inventory_configuration(self, Bucket: str, Id: str, InventoryConfiguration: dict): ...
    def put_bucket_lifecycle(self, Bucket: str, ContentMD5: str = None, LifecycleConfiguration: dict = None): ...
    def put_bucket_lifecycle_configuration(self, Bucket: str, LifecycleConfiguration: dict = None): ...
    def put_bucket_logging(self, Bucket: str, BucketLoggingStatus: dict, ContentMD5: str = None): ...
    def put_bucket_metrics_configuration(self, Bucket: str, Id: str, MetricsConfiguration: dict): ...
    def put_bucket_notification(self, Bucket: str, NotificationConfiguration: dict, ContentMD5: str = None): ...
    def put_bucket_notification_configuration(self, Bucket: str, NotificationConfiguration: dict): ...
    def put_bucket_policy(self, Bucket: str, Policy: str, ContentMD5: str = None, ConfirmRemoveSelfBucketAccess: bool = None): ...
    def put_bucket_replication(self, Bucket: str, ReplicationConfiguration: dict, ContentMD5: str = None, Token: str = None): ...
    def put_bucket_request_payment(self, Bucket: str, RequestPaymentConfiguration: dict, ContentMD5: str = None): ...
    def put_bucket_tagging(self, Bucket: str, Tagging: dict, ContentMD5: str = None): ...
    def put_bucket_versioning(self, Bucket: str, VersioningConfiguration: dict, ContentMD5: str = None, MFA: str = None): ...
    def put_bucket_website(self, Bucket: str, WebsiteConfiguration: dict, ContentMD5: str = None): ...
    def put_object(self, Bucket: str, Key: str, ACL: str = None, Body: bytes = None, CacheControl: str = None, ContentDisposition: str = None, ContentEncoding: str = None, ContentLanguage: str = None, ContentLength: int = None, ContentMD5: str = None, ContentType: str = None, Expires: datetime = None, GrantFullControl: str = None, GrantRead: str = None, GrantReadACP: str = None, GrantWriteACP: str = None, Metadata: Map = None, ServerSideEncryption: str = None, StorageClass: str = None, WebsiteRedirectLocation: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, SSEKMSKeyId: str = None, RequestPayer: str = None, Tagging: str = None, ObjectLockMode: str = None, ObjectLockRetainUntilDate: datetime = None, ObjectLockLegalHoldStatus: str = None): ...
    def put_object_acl(self, Bucket: str, Key: str, ACL: str = None, AccessControlPolicy: dict = None, ContentMD5: str = None, GrantFullControl: str = None, GrantRead: str = None, GrantReadACP: str = None, GrantWrite: str = None, GrantWriteACP: str = None, RequestPayer: str = None, VersionId: str = None): ...
    def put_object_legal_hold(self, Bucket: str, Key: str, LegalHold: dict = None, RequestPayer: str = None, VersionId: str = None, ContentMD5: str = None): ...
    def put_object_lock_configuration(self, Bucket: str, ObjectLockConfiguration: dict = None, RequestPayer: str = None, Token: str = None, ContentMD5: str = None): ...
    def put_object_retention(self, Bucket: str, Key: str, Retention: dict = None, RequestPayer: str = None, VersionId: str = None, BypassGovernanceRetention: bool = None, ContentMD5: str = None): ...
    def put_object_tagging(self, Bucket: str, Key: str, Tagging: dict, VersionId: str = None, ContentMD5: str = None): ...
    def put_public_access_block(self, Bucket: str, PublicAccessBlockConfiguration: dict, ContentMD5: str = None): ...
    def restore_object(self, Bucket: str, Key: str, VersionId: str = None, RestoreRequest: dict = None, RequestPayer: str = None): ...
    def select_object_content(self, Bucket: str, Key: str, Expression: str, ExpressionType: str, InputSerialization: dict, OutputSerialization: dict, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, RequestProgress: dict = None): ...
    def upload_part(self, Bucket: str, Key: str, PartNumber: int, UploadId: str, Body: bytes = None, ContentLength: int = None, ContentMD5: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, RequestPayer: str = None): ...
    def upload_part_copy(self, Bucket: str, CopySource: str, Key: str, PartNumber: int, UploadId: str, CopySourceIfMatch: str = None, CopySourceIfModifiedSince: datetime = None, CopySourceIfNoneMatch: str = None, CopySourceIfUnmodifiedSince: datetime = None, CopySourceRange: str = None, SSECustomerAlgorithm: str = None, SSECustomerKey: str = None, SSECustomerKeyMD5: str = None, CopySourceSSECustomerAlgorithm: str = None, CopySourceSSECustomerKey: str = None, CopySourceSSECustomerKeyMD5: str = None, RequestPayer: str = None): ...
    pass

