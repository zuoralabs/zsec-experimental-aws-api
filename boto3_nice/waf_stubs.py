
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class waf_client_type(BaseClient):
    def create_byte_match_set(self, Name: str, ChangeToken: str): ...
    def create_geo_match_set(self, Name: str, ChangeToken: str): ...
    def create_ip_set(self, Name: str, ChangeToken: str): ...
    def create_rate_based_rule(self, Name: str, MetricName: str, RateKey: str, RateLimit: int, ChangeToken: str): ...
    def create_regex_match_set(self, Name: str, ChangeToken: str): ...
    def create_regex_pattern_set(self, Name: str, ChangeToken: str): ...
    def create_rule(self, Name: str, MetricName: str, ChangeToken: str): ...
    def create_rule_group(self, Name: str, MetricName: str, ChangeToken: str): ...
    def create_size_constraint_set(self, Name: str, ChangeToken: str): ...
    def create_sql_injection_match_set(self, Name: str, ChangeToken: str): ...
    def create_web_acl(self, Name: str, MetricName: str, DefaultAction: dict, ChangeToken: str): ...
    def create_xss_match_set(self, Name: str, ChangeToken: str): ...
    def delete_byte_match_set(self, ByteMatchSetId: str, ChangeToken: str): ...
    def delete_geo_match_set(self, GeoMatchSetId: str, ChangeToken: str): ...
    def delete_ip_set(self, IPSetId: str, ChangeToken: str): ...
    def delete_logging_configuration(self, ResourceArn: str): ...
    def delete_permission_policy(self, ResourceArn: str): ...
    def delete_rate_based_rule(self, RuleId: str, ChangeToken: str): ...
    def delete_regex_match_set(self, RegexMatchSetId: str, ChangeToken: str): ...
    def delete_regex_pattern_set(self, RegexPatternSetId: str, ChangeToken: str): ...
    def delete_rule(self, RuleId: str, ChangeToken: str): ...
    def delete_rule_group(self, RuleGroupId: str, ChangeToken: str): ...
    def delete_size_constraint_set(self, SizeConstraintSetId: str, ChangeToken: str): ...
    def delete_sql_injection_match_set(self, SqlInjectionMatchSetId: str, ChangeToken: str): ...
    def delete_web_acl(self, WebACLId: str, ChangeToken: str): ...
    def delete_xss_match_set(self, XssMatchSetId: str, ChangeToken: str): ...
    def get_byte_match_set(self, ByteMatchSetId: str): ...
    def get_change_token(self): ...
    def get_change_token_status(self, ChangeToken: str): ...
    def get_geo_match_set(self, GeoMatchSetId: str): ...
    def get_ip_set(self, IPSetId: str): ...
    def get_logging_configuration(self, ResourceArn: str): ...
    def get_permission_policy(self, ResourceArn: str): ...
    def get_rate_based_rule(self, RuleId: str): ...
    def get_rate_based_rule_managed_keys(self, RuleId: str, NextMarker: str = None): ...
    def get_regex_match_set(self, RegexMatchSetId: str): ...
    def get_regex_pattern_set(self, RegexPatternSetId: str): ...
    def get_rule(self, RuleId: str): ...
    def get_rule_group(self, RuleGroupId: str): ...
    def get_sampled_requests(self, WebAclId: str, RuleId: str, TimeWindow: dict, MaxItems: int): ...
    def get_size_constraint_set(self, SizeConstraintSetId: str): ...
    def get_sql_injection_match_set(self, SqlInjectionMatchSetId: str): ...
    def get_web_acl(self, WebACLId: str): ...
    def get_xss_match_set(self, XssMatchSetId: str): ...
    def list_activated_rules_in_rule_group(self, RuleGroupId: str = None, NextMarker: str = None, Limit: int = None): ...
    def list_byte_match_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_geo_match_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_ip_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_logging_configurations(self, NextMarker: str = None, Limit: int = None): ...
    def list_rate_based_rules(self, NextMarker: str = None, Limit: int = None): ...
    def list_regex_match_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_regex_pattern_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_rule_groups(self, NextMarker: str = None, Limit: int = None): ...
    def list_rules(self, NextMarker: str = None, Limit: int = None): ...
    def list_size_constraint_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_sql_injection_match_sets(self, NextMarker: str = None, Limit: int = None): ...
    def list_subscribed_rule_groups(self, NextMarker: str = None, Limit: int = None): ...
    def list_web_acls(self, NextMarker: str = None, Limit: int = None): ...
    def list_xss_match_sets(self, NextMarker: str = None, Limit: int = None): ...
    def put_logging_configuration(self, LoggingConfiguration: dict): ...
    def put_permission_policy(self, ResourceArn: str, Policy: str): ...
    def update_byte_match_set(self, ByteMatchSetId: str, ChangeToken: str, Updates: list): ...
    def update_geo_match_set(self, GeoMatchSetId: str, ChangeToken: str, Updates: list): ...
    def update_ip_set(self, IPSetId: str, ChangeToken: str, Updates: list): ...
    def update_rate_based_rule(self, RuleId: str, ChangeToken: str, Updates: list, RateLimit: int): ...
    def update_regex_match_set(self, RegexMatchSetId: str, Updates: list, ChangeToken: str): ...
    def update_regex_pattern_set(self, RegexPatternSetId: str, Updates: list, ChangeToken: str): ...
    def update_rule(self, RuleId: str, ChangeToken: str, Updates: list): ...
    def update_rule_group(self, RuleGroupId: str, Updates: list, ChangeToken: str): ...
    def update_size_constraint_set(self, SizeConstraintSetId: str, ChangeToken: str, Updates: list): ...
    def update_sql_injection_match_set(self, SqlInjectionMatchSetId: str, ChangeToken: str, Updates: list): ...
    def update_web_acl(self, WebACLId: str, ChangeToken: str, Updates: list = None, DefaultAction: dict = None): ...
    def update_xss_match_set(self, XssMatchSetId: str, ChangeToken: str, Updates: list): ...
    pass

