
import typing
import botocore.session
import aws_meta
from botocore.model import *
from botocore.client import BaseClient
from datetime import datetime
import boto3


class Map(dict):
    pass
    
    
# noinspection PyPep8Naming
class cloudwatch_client_type(BaseClient):
    def delete_alarms(self, AlarmNames: list): ...
    def delete_dashboards(self, DashboardNames: list): ...
    def describe_alarm_history(self, AlarmName: str = None, HistoryItemType: str = None, StartDate: datetime = None, EndDate: datetime = None, MaxRecords: int = None, NextToken: str = None): ...
    def describe_alarms(self, AlarmNames: list = None, AlarmNamePrefix: str = None, StateValue: str = None, ActionPrefix: str = None, MaxRecords: int = None, NextToken: str = None): ...
    def describe_alarms_for_metric(self, MetricName: str, Namespace: str, Statistic: str = None, ExtendedStatistic: str = None, Dimensions: list = None, Period: int = None, Unit: str = None): ...
    def disable_alarm_actions(self, AlarmNames: list): ...
    def enable_alarm_actions(self, AlarmNames: list): ...
    def get_dashboard(self, DashboardName: str): ...
    def get_metric_data(self, MetricDataQueries: list, StartTime: datetime, EndTime: datetime, NextToken: str = None, ScanBy: str = None, MaxDatapoints: int = None): ...
    def get_metric_statistics(self, Namespace: str, MetricName: str, StartTime: datetime, EndTime: datetime, Period: int, Dimensions: list = None, Statistics: list = None, ExtendedStatistics: list = None, Unit: str = None): ...
    def get_metric_widget_image(self, MetricWidget: str, OutputFormat: str = None): ...
    def list_dashboards(self, DashboardNamePrefix: str = None, NextToken: str = None): ...
    def list_metrics(self, Namespace: str = None, MetricName: str = None, Dimensions: list = None, NextToken: str = None): ...
    def list_tags_for_resource(self, ResourceARN: str): ...
    def put_dashboard(self, DashboardName: str, DashboardBody: str): ...
    def put_metric_alarm(self, AlarmName: str, EvaluationPeriods: int, Threshold: int, ComparisonOperator: str, AlarmDescription: str = None, ActionsEnabled: bool = None, OKActions: list = None, AlarmActions: list = None, InsufficientDataActions: list = None, MetricName: str = None, Namespace: str = None, Statistic: str = None, ExtendedStatistic: str = None, Dimensions: list = None, Period: int = None, Unit: str = None, DatapointsToAlarm: int = None, TreatMissingData: str = None, EvaluateLowSampleCountPercentile: str = None, Metrics: list = None, Tags: list = None): ...
    def put_metric_data(self, Namespace: str, MetricData: list): ...
    def set_alarm_state(self, AlarmName: str, StateValue: str, StateReason: str, StateReasonData: str = None): ...
    def tag_resource(self, ResourceARN: str, Tags: list): ...
    def untag_resource(self, ResourceARN: str, TagKeys: list): ...
    pass

